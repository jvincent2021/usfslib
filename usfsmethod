def evaluate_method(X):
    silhouette_coefficients = []
    prev_score = 0
    for k in range(2, 11):
        kmeans = KMeans(n_clusters=k, **kmeans_kwargs)
        kmeans.fit(X)
        score = silhouette_score(X, kmeans.labels_)
        print ("iteration : ",k ," - ", score)
        if (score - prev_score) > 0.02:
            selected_k = k
            selected_score = score
            prev_score = score
        silhouette_coefficients.append(score)
    
    plt.plot(range(2, 11), silhouette_coefficients)
    plt.xticks(range(2, 11))
    plt.xlabel("Number of Clusters")
    plt.ylabel("Silhouette Coefficient")
    plt.show()
    
    print ("Selected K : ",selected_k ," - ", selected_score)
    
    kmeans = KMeans(n_clusters=7, **kmeans_kwargs)
    kmeans.fit(X)
    score = silhouette_score(X, kmeans.labels_)
    kmeans_label = kmeans.labels_
    
    from sklearn.decomposition import PCA

    #Reducing components further to 2 and visualize resulting principal components
    pca = PCA(n_components=2)
    pca = pca.fit_transform(X)
    pca

    plt.figure(figsize=(15,10))
    plt.scatter(pca[:,0], pca[:,1], c=kmeans_label_7, edgecolor='none', alpha=0.7,
           cmap=plt.get_cmap('jet', 10), s=20)
    plt.colorbar()
    
    
    from sklearn.feature_selection import VarianceThreshold


def low_variance_fs(X, threshold):
    sel = VarianceThreshold(threshold)
    return sel.fit_transform(X)
    
def unsupervised_feature_selection(X, method, input):
    if method == 'variance' :
        vardf = low_variance_fs( X, input)
